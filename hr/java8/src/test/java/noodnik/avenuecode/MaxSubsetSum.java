package noodnik.avenuecode;

import org.junit.Assert;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import static noodnik.lib.Common.invokeRunnableLogElapsedTime;
import static noodnik.lib.Common.listOfInts;
import static noodnik.lib.Common.listOfLongs;
import static noodnik.lib.Common.log;
import static org.junit.Assert.assertEquals;

public class MaxSubsetSum {

    @Test
    public void sampleCase1() {
        assertEquals(listOfLongs(3L, 7L), maxSubsetSum(listOfInts(2, 4)));
    }

    @Test
    public void sampleCase2ExpectedResult() {
        assertEquals(listOfLongs(28L), maxSubsetSum(listOfInts(12)));
    }

    @Test
    public void sampleTestCase3ExpectedResult() {
        assertExpectedResult("sampleTestCase3", TESTCASE3_EXPECTED_RESULTS, TESTCASE3_TEST_INPUT);
    }

    @Test
    public void sampleTestCase3ElapsedTime() {
        invokeRunnableLogElapsedTime(
            "sampleTestCase3ElapsedTime",
            () -> IntStream.range(0, 300).forEach(
                i -> assertEquals(TESTCASE3_EXPECTED_RESULTS, maxSubsetSum(TESTCASE3_TEST_INPUT))
            )
        );
    }

    @Test
    public void sampleCase3aSingleExpectedResult() {
        assertEquals(listOfLongs(36), maxSubsetSum(listOfInts(22)));
    }

    @Test
    public void testHighLowEdges() {
        assertEquals(listOfLongs(1, 2340), maxSubsetSum(listOfInts(1, 1000)));
    }

    @Test
    public void testFullRangeExpectedResult() {
        assertExpectedResult("testFullRange", FULLRANGE_EXPECTED_RESULTS, FULLRANGE_TEST_INPUT);
    }

    @Test
    public void testEntireRangeElapsedTime() {
        invokeRunnableLogElapsedTime(
            "testEntireRangeElapsedTime",
            () -> IntStream.range(0, 300).forEach(
                i -> assertEquals(FULLRANGE_EXPECTED_RESULTS, maxSubsetSum(FULLRANGE_TEST_INPUT))
            )
        );
    }

    private static final List<Integer> TESTCASE3_TEST_INPUT = listOfInts(
        97, 22, 80, 1, 13, 9, 39, 93, 70, 81, 1, 52, 76, 64, 91, 3, 53, 99, 97, 1, 88, 34, 79, 10,
        59, 17, 24, 40, 37, 38, 2, 61, 86, 20, 39, 32, 76, 15, 97, 12, 1, 35, 38, 62, 31, 84, 22, 7, 52,
        31, 13, 77, 22, 78, 88, 21, 74, 21, 48, 7, 82, 81, 92, 2, 49, 67, 57, 38, 20, 98, 99, 38, 2, 91,
        14, 60, 84, 34, 6, 9, 95, 69, 45, 31, 27, 81, 24, 93, 22, 69, 14, 73, 55, 67, 72, 50, 9, 18, 57,
        13, 80, 42, 66, 30, 42, 88, 61, 27, 98, 13, 76, 12, 90, 71, 57, 95, 71, 99, 86, 100, 59, 20, 36,
        98, 95, 81, 36, 5, 71, 14, 42, 31, 11, 91, 57, 85, 16, 3, 15, 75, 93, 47, 92, 72, 96, 42, 65, 93,
        100, 80, 59, 33, 48, 95, 55, 26, 38, 100, 44, 11, 62, 55, 13, 69, 83, 37, 36, 41, 57, 79, 12, 8,
        69, 35, 8, 86, 42, 60, 29, 80, 84, 36, 66, 5, 18, 86, 19, 85, 72, 98, 7, 45, 72, 40, 87, 87, 91,
        100, 48, 37, 65, 21, 92, 29, 98, 61, 30, 36, 23, 93, 25, 90, 57, 39, 56, 99, 73, 8, 15, 46, 17,
        64, 57, 10, 31, 5, 26, 69, 76, 28, 36, 5, 72, 52, 27, 11, 36, 73, 42, 40, 28, 56, 20, 69, 65,
        77, 72, 31, 56, 97, 57, 94, 70, 59, 11, 50, 27, 71, 31, 82, 12, 41, 13, 62, 9, 24, 61, 78, 92,
        87, 63, 86, 5, 14, 4, 21, 99, 2, 66, 97, 96, 70, 56, 53, 53, 89, 52, 61, 85, 90, 34, 47, 77, 3,
        78, 19, 28, 11, 97, 6, 17, 19, 93, 20, 46, 70, 31, 52, 19, 74, 87, 49, 92, 7, 75, 6, 64, 68, 61,
        16, 61, 57, 91, 24, 21, 82, 28, 72, 23, 19, 29, 7, 6, 37, 25, 88, 14, 9, 98, 4, 1, 93, 10, 4, 30,
        63, 96, 51, 70, 34, 13, 10, 3, 60, 53, 49, 54, 27, 74, 90, 32, 68, 47, 60, 18, 69, 42, 54, 38, 18,
        34, 58, 50, 87, 60, 61, 48, 6, 69, 62, 67, 29, 28, 43, 98, 8, 74, 1, 71, 4, 48, 76, 20, 27, 100,
        86, 58, 75, 49, 88, 53, 66, 5, 18, 73, 88, 44, 25, 62, 13, 43, 80, 36, 12, 31, 88, 51, 37, 89, 66,
        64, 42, 11, 42, 86, 3, 32, 17, 71, 91, 69, 40, 12, 53, 4, 56, 1, 17, 3, 34, 29, 16, 62, 81, 95,
        34, 17, 92, 81, 46, 89, 22, 74, 29, 14, 64, 83, 9, 64, 52, 14, 73, 30, 9, 19, 30, 87, 52, 4, 84,
        71, 38, 29, 86, 42, 60, 74, 77, 94, 63, 29, 68, 64, 38, 55, 21, 37, 27, 27, 77, 6, 25, 21, 33,
        33, 67, 26, 85, 58, 97, 45, 74, 39, 77, 98, 80, 79, 95, 59, 64, 43, 49, 43, 10, 44, 77, 97, 59,
        65, 1, 65, 85, 74, 42, 14, 48, 93, 75, 60, 43, 44, 72, 41, 48, 84, 21, 99, 29, 25, 20, 76, 94, 28, 23
    );

    private static final List<Long> TESTCASE3_EXPECTED_RESULTS = listOfLongs(
        98, 36, 186, 1, 14, 13, 56, 128, 144, 121, 1, 98, 140, 127, 112, 4, 54, 156, 98, 1, 180, 54, 80, 18,
        60, 18, 60, 90, 38, 60, 3, 62, 132, 42, 56, 63, 140, 24, 98, 28, 1, 48, 60, 96, 32, 224, 36, 8, 98,
        32, 14, 96, 36, 168, 180, 32, 114, 32, 124, 8, 126, 121, 168, 3, 57, 68, 80, 60, 42, 171, 156, 60,
        3, 112, 24, 168, 224, 54, 12, 13, 120, 96, 78, 32, 40, 121, 60, 128, 36, 96, 24, 74, 72, 68, 195,
        93, 13, 39, 80, 14, 186, 96, 144, 72, 96, 180, 62, 40, 171, 14, 140, 28, 234, 72, 80, 120, 72, 156,
        132, 217, 60, 42, 91, 171, 120, 121, 91, 6, 72, 24, 96, 32, 12, 112, 80, 108, 31, 4, 24, 124, 128,
        48, 168, 195, 252, 96, 84, 128, 217, 186, 60, 48, 124, 120, 72, 42, 60, 217, 84, 12, 96, 72, 14, 96,
        84, 38, 91, 42, 80, 80, 28, 15, 96, 48, 15, 132, 96, 168, 30, 186, 224, 91, 144, 6, 39, 132, 20, 108,
        195, 171, 8, 78, 195, 90, 120, 120, 112, 217, 124, 38, 84, 32, 168, 30, 171, 62, 72, 91, 24, 128, 31,
        234, 80, 56, 120, 156, 74, 15, 24, 72, 18, 127, 80, 18, 32, 6, 42, 96, 140, 56, 91, 6, 195, 98, 40,
        12, 91, 74, 96, 90, 56, 120, 42, 96, 84, 96, 195, 32, 120, 98, 80, 144, 144, 60, 12, 93, 40, 72, 32,
        126, 28, 42, 14, 96, 13, 60, 62, 168, 168, 120, 104, 132, 6, 24, 7, 32, 156, 3, 144, 98, 252, 144,
        120, 54, 54, 90, 98, 62, 108, 234, 54, 48, 96, 4, 168, 20, 56, 12, 98, 12, 18, 20, 128, 42, 72, 144,
        32, 98, 20, 114, 120, 57, 168, 8, 124, 12, 127, 126, 62, 31, 62, 80, 112, 60, 32, 126, 56, 195, 24,
        20, 30, 8, 12, 38, 31, 180, 24, 13, 171, 7, 1, 128, 18, 7, 72, 104, 252, 72, 144, 54, 14, 18, 4, 168,
        54, 57, 120, 40, 114, 234, 63, 126, 48, 168, 39, 96, 96, 120, 60, 39, 54, 90, 93, 120, 168, 62, 124,
        12, 96, 96, 68, 30, 56, 44, 171, 15, 114, 1, 72, 7, 124, 140, 42, 40, 217, 132, 90, 124, 57, 180, 54,
        144, 6, 39, 74, 180, 84, 31, 96, 14, 44, 186, 91, 28, 32, 180, 72, 38, 90, 144, 127, 96, 12, 96, 132,
        4, 63, 18, 72, 112, 96, 90, 28, 54, 7, 120, 1, 18, 4, 54, 30, 31, 96, 121, 120, 54, 18, 168, 121, 72,
        90, 36, 114, 30, 24, 127, 84, 13, 127, 98, 24, 74, 72, 13, 20, 72, 120, 98, 7, 224, 72, 60, 30, 132,
        96, 168, 114, 96, 144, 104, 30, 126, 127, 60, 72, 32, 38, 40, 40, 96, 12, 31, 32, 48, 48, 68, 42, 108,
        90, 98, 78, 114, 56, 96, 171, 186, 80, 120, 60, 127, 44, 57, 44, 18, 84, 96, 98, 60, 84, 1, 84, 108,
        114, 96, 24, 124, 128, 124, 168, 44, 84, 195, 42, 124, 224, 32, 156, 30, 31, 42, 140, 144, 56, 24
    );

    private static final List<Integer> FULLRANGE_TEST_INPUT = (
        IntStream.rangeClosed(1, 1000).boxed().collect(Collectors.toList())
    );
    private static final List<Long> FULLRANGE_EXPECTED_RESULTS = listOfLongs(
        // TODO: confirm correctness of these expected results
        1, 3, 4, 7, 6, 12, 8, 15, 13, 18, 12, 28, 14, 24, 24, 31, 18, 39, 20, 42, 32,
        36, 24, 60, 31, 42, 40, 56, 30, 72, 32, 63, 48, 54, 48, 91, 38, 60, 56, 90, 42, 96, 44,
        84, 78, 72, 48, 124, 57, 93, 72, 98, 54, 120, 72, 120, 80, 90, 60, 168, 62, 96, 104, 127,
        84, 144, 68, 126, 96, 144, 72, 195, 74, 114, 124, 140, 96, 168, 80, 186, 121, 126, 84, 224,
        108, 132, 120, 180, 90, 234, 112, 168, 128, 144, 120, 252, 98, 171, 156, 217, 102, 216, 104,
        210, 192, 162, 108, 280, 110, 216, 152, 248, 114, 240, 144, 210, 182, 180, 144, 360, 133, 186,
        168, 224, 156, 312, 128, 255, 176, 252, 132, 336, 160, 204, 240, 270, 138, 288, 140, 336, 192,
        216, 168, 403, 180, 222, 228, 266, 150, 372, 152, 300, 234, 288, 192, 392, 158, 240, 216, 378,
        192, 363, 164, 294, 288, 252, 168, 480, 183, 324, 260, 308, 174, 360, 248, 372, 240, 270, 180,
        546, 182, 336, 248, 360, 228, 384, 216, 336, 320, 360, 192, 508, 194, 294, 336, 399, 198, 468,
        200, 465, 272, 306, 240, 504, 252, 312, 312, 434, 240, 576, 212, 378, 288, 324, 264, 600, 256,
        330, 296, 504, 252, 456, 224, 504, 403, 342, 228, 560, 230, 432, 384, 450, 234, 546, 288, 420,
        320, 432, 240, 744, 242, 399, 364, 434, 342, 504, 280, 480, 336, 468, 252, 728, 288, 384, 432,
        511, 258, 528, 304, 588, 390, 396, 264, 720, 324, 480, 360, 476, 270, 720, 272, 558, 448, 414,
        372, 672, 278, 420, 416, 720, 282, 576, 284, 504, 480, 504, 336, 819, 307, 540, 392, 518, 294,
        684, 360, 570, 480, 450, 336, 868, 352, 456, 408, 620, 372, 702, 308, 672, 416, 576, 312, 840,
        314, 474, 624, 560, 318, 648, 360, 762, 432, 576, 360, 847, 434, 492, 440, 630, 384, 864, 332,
        588, 494, 504, 408, 992, 338, 549, 456, 756, 384, 780, 400, 660, 576, 522, 348, 840, 350, 744,
        560, 756, 354, 720, 432, 630, 576, 540, 360, 1170, 381, 546, 532, 784, 444, 744, 368, 744, 546,
        684, 432, 896, 374, 648, 624, 720, 420, 960, 380, 840, 512, 576, 384, 1020, 576, 582, 572, 686,
        390, 1008, 432, 855, 528, 594, 480, 1092, 398, 600, 640, 961, 402, 816, 448, 714, 726, 720, 456,
        1080, 410, 756, 552, 728, 480, 936, 504, 882, 560, 720, 420, 1344, 422, 636, 624, 810, 558, 864,
        496, 756, 672, 792, 432, 1240, 434, 768, 720, 770, 480, 888, 440, 1080, 741, 756, 444, 1064, 540,
        672, 600, 1016, 450, 1209, 504, 798, 608, 684, 672, 1200, 458, 690, 720, 1008, 462, 1152, 464, 930,
        768, 702, 468, 1274, 544, 864, 632, 900, 528, 960, 620, 1008, 702, 720, 480, 1512, 532, 726, 768, 931,
        588, 1092, 488, 930, 656, 1026, 492, 1176, 540, 840, 936, 992, 576, 1008, 500, 1092, 672, 756, 504,
        1560, 612, 864, 732, 896, 510, 1296, 592, 1023, 800, 774, 624, 1232, 576, 912, 696, 1260, 522, 1170,
        524, 924, 992, 792, 576, 1488, 553, 972, 780, 1120, 588, 1080, 648, 1020, 720, 810, 684, 1680, 542,
        816, 728, 1134, 660, 1344, 548, 966, 806, 1116, 600, 1440, 640, 834, 912, 980, 558, 1248, 616, 1488,
        864, 846, 564, 1344, 684, 852, 968, 1080, 570, 1440, 572, 1176, 768, 1008, 744, 1651, 578, 921, 776,
        1260, 672, 1176, 648, 1110, 1092, 882, 588, 1596, 640, 1080, 792, 1178, 594, 1440, 864, 1050, 800,
        1008, 600, 1860, 602, 1056, 884, 1064, 798, 1224, 608, 1260, 960, 1116, 672, 1638, 614, 924, 1008,
        1440, 618, 1248, 620, 1344, 960, 936, 720, 1736, 781, 942, 960, 1106, 684, 1872, 632, 1200, 848, 954,
        768, 1512, 798, 1080, 936, 1530, 642, 1296, 644, 1344, 1056, 1080, 648, 1815, 720, 1302, 1024, 1148,
        654, 1320, 792, 1302, 962, 1152, 660, 2016, 662, 996, 1008, 1260, 960, 1482, 720, 1176, 896, 1224,
        744, 2016, 674, 1014, 1240, 1281, 678, 1368, 784, 1620, 912, 1152, 684, 1820, 828, 1200, 920, 1364,
        756, 1728, 692, 1218, 1248, 1044, 840, 1800, 756, 1050, 936, 1736, 702, 1680, 760, 1524, 1152, 1062,
        816, 1680, 710, 1296, 1040, 1350, 768, 1728, 1008, 1260, 960, 1080, 720, 2418, 832, 1143, 968, 1274,
        930, 1596, 728, 1680, 1093, 1332, 792, 1736, 734, 1104, 1368, 1512, 816, 1638, 740, 1596, 1120, 1296,
        744, 1920, 900, 1122, 1092, 1512, 864, 1872, 752, 1488, 1008, 1260, 912, 2240, 758, 1140, 1152, 1800,
        762, 1536, 880, 1344, 1404, 1152, 840, 2044, 770, 1728, 1032, 1358, 774, 1716, 992, 1470, 1216, 1170,
        840, 2352, 864, 1296, 1200, 1767, 948, 1584, 788, 1386, 1056, 1440, 912, 2340, 868, 1194, 1296, 1400,
        798, 1920, 864, 1953, 1170, 1206, 888, 1904, 1152, 1344, 1080, 1530, 810, 2178, 812, 1680, 1088, 1368,
        984, 2232, 880, 1230, 1456, 1764, 822, 1656, 824, 1560, 1488, 1440, 828, 2184, 830, 1512, 1112, 1778,
        1026, 1680, 1008, 1680, 1280, 1260, 840, 2880, 871, 1266, 1128, 1484, 1098, 1872, 1064, 1674, 1136,
        1674, 912, 2016, 854, 1488, 1560, 1620, 858, 2016, 860, 1848, 1344, 1296, 864, 2520, 1044, 1302, 1228,
        1792, 960, 2160, 952, 1650, 1274, 1440, 1248, 2072, 878, 1320, 1176, 2232, 882, 2223, 884, 1764, 1440,
        1332, 888, 2280, 1024, 1620, 1452, 1568, 960, 1800, 1080, 2040, 1344, 1350, 960, 2821, 972, 1512, 1408,
        1710, 1092, 1824, 908, 1596, 1326, 2016, 912, 2480, 1008, 1374, 1488, 1610, 1056, 2160, 920, 2160, 1232,
        1386, 1008, 2688, 1178, 1392, 1352, 1890, 930, 2304, 1140, 1638, 1248, 1404, 1296, 2730, 938, 1632, 1256,
        2016, 942, 1896, 1008, 1860, 1920, 1584, 948, 2240, 1036, 1860, 1272, 2160, 954, 2106, 1152, 1680, 1440,
        1440, 1104, 3048, 993, 1596, 1404, 1694, 1164, 2304, 968, 1995, 1440, 1764, 972, 2548, 1120, 1464, 1736,
        1922, 978, 1968, 1080, 2394, 1430, 1476, 984, 2520, 1188, 1620, 1536, 1960, 1056, 2808, 992, 2016, 1328,
        1728, 1200, 2352, 998, 1500, 1520, 2340
    );

    /**
     *  For each number in the array, get the sum of its factors.
     *  Return an array of results.
     *
     *  Example:
     *    arr = [12]
     *
     *  The factors of arr[0] = 12 are [1, 2, 3, 4, 6, 12].
     *  The sum of these factors is 28.  Return the array [28].
     *
     * Constraints:
     *    1 <= n <= 10^3
     *    1 <= arr[i] <= 10^9
     *
     * @param k array of n integers
     * @return sums calculated for each array[i]
     */
    public static List<Long> maxSubsetSum(List<Integer> k) {
        final long[] sumFactors = new long[1001];   // constraint: 1 <= n <= 10^3
        return k.stream().map(n -> getSumFactors(n, sumFactors)).collect(Collectors.toList());
    }

    /**
     * Strategy:
     *  If cache has the desired answer, return it
     *  First find list of primes <= 1/2 n
     *  for each prime which evenly divides n,
     *  add both it and all factors of the result
     *  add it to the cache
     */
    private static long getSumFactors(final int n, final long[] sumFactorsCache) {

        if (sumFactorsCache[n] != 0) {
            return sumFactorsCache[n];
        }

        // handle degenerate cases
        if (n == 1) return 1;
        if (n == 2) return 3;

        // collect set of multiplicands of each prime
        // less than n/2 that evenly divides n
        final Collection<Integer> factors = new HashSet<>();
        loadFactors(factors, n, findPrimes(n / 2));

        // calculate sum of unique factors
        final long sumFactors = 1 + n + factors.stream().mapToLong(Integer::intValue).sum();

        // save it in the cache, and return it
        sumFactorsCache[n] = sumFactors;
        return sumFactors;
    }

    private static void loadFactors(
        final Collection<Integer> factors,
        final int n,
        final List<Integer> primes
    ) {
        for (final int prime : primes) {
            if (n != prime && n % prime == 0) {
                factors.add(prime);
                factors.add(n / prime);
                loadFactors(factors, n / prime, primes);
            }
        }
    }

    /** @return list of primes <= maxNumber */
    private static List<Integer> findPrimes(int maxNumber) {
        final List<Integer> primes = new ArrayList<>();
        for (int n = 1; n <= maxNumber; n++) {
            if (isPrime(n)) {
                primes.add(n);
            }
        }
        return primes;
    }

    // use primality single prime finder
    private static boolean isPrime(final int n) {
        if (n <= 3) {
            return n > 1;
        }
        if (n % 2 == 0 || n % 3 == 0) {
            return false;
        }
        for (int i = 5; i * i <= n; i += 6) {
            if (n % i == 0 || n % (i + 2) == 0) {
                return false;
            }
        }
        return true;
    }

    private static void assertExpectedResult(
        final String message,
        final List<Long> expectedOutput,
        final List<Integer> testInput
    ) {
        Assert.assertEquals(testInput.size(), expectedOutput.size());

        int failureCount = 0;
        for (int i = 0; i < testInput.size(); i++) {
            final int n = testInput.get(i);
            List<Long> r = maxSubsetSum(listOfInts(n));
            Assert.assertEquals(1, r.size());
            final long actual = r.get(0);
            final long expected = expectedOutput.get(i);
            if (expected != actual) {
                log("%s: expected(%s) actual(%s)", n, expected, actual);
                failureCount++;
            }
        }
        log("%s: failureCount(%s) out of(%s)", message, failureCount, testInput.size());

        assertEquals(message, expectedOutput, maxSubsetSum(testInput));
    }

}
